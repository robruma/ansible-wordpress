---
- name: Check for wordpress_site_name var
  fail:
    msg: "wordpress_site_name has not been defined"
  when: wordpress_site_name|default(False) == False

- name: Check for wordpress_db_user var
  fail:
    msg: "wordpress_db_user has not been defined"
  when: wordpress_db_user|default(False) == False

- name: Check for wordpress_db_password var
  fail:
    msg: "wordpress_db_password has not been defined"
  when: wordpress_db_password|default(False) == False

- name: Check for wordpress_db_name var
  fail:
    msg: "wordpress_db_name has not been defined"
  when: wordpress_db_name|default(False) == False

- name: Check for wordpress_db_host var
  fail:
    msg: "wordpress_db_host has not been defined"
  when: wordpress_db_host|default(False) == False

- name: Ensure {{ apache_base_dir }} exists
  command: /usr/bin/test -d {{ apache_base_dir }}
  register: dir_exists
  ignore_errors: True

- name: Create {{ apache_base_dir }}
  when: dir_exists.rc != 0
  file: state=directory path={{ apache_base_dir }} owner={{ apache_user }} group={{ apache_group }} mode=0755 recurse=yes

- name: Get the latest Wordpress package
  get_url: url={{ wordpress_package_url }} dest={{ apache_base_dir }}/latest.tar.gz

- name: Extract Wordpress package
  unarchive: src={{ apache_base_dir }}/latest.tar.gz dest={{ apache_base_dir }} copy=no

- name: Rename the extracted Wordpress directory
  command: mv {{ apache_base_dir }}/wordpress {{ apache_base_dir }}/{{ wordpress_site_name }}
  register: dir_rename
  ignore_errors: True

- name: Copy wp-config.php file inside {{ wordpress_site_name }} directory
  when: dir_rename|success
  template: src=wp-config.php.j2 dest={{ apache_base_dir }}/{{ wordpress_site_name }}/wp-config.php
  notify: restart apache

- name: Reset permissions on {{ wordpress_site_name }} directory
  file: state=directory path={{ apache_base_dir }}/{{ wordpress_site_name }} owner={{ apache_user }} group={{ apache_group }} recurse=yes
